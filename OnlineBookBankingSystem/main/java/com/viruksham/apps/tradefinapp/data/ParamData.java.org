package com.viruksham.apps.tradefinapp.data;
  
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;
  
import org.codehaus.jackson.annotate.JsonAutoDetect;
import org.codehaus.jackson.annotate.JsonMethod;
  
import com.viruksham.utils.security.SecurityUtil;
  
/**
 * @author bala
 *
 */
@JsonAutoDetect(value=JsonMethod.NONE)
public class UserData extends BaseData{
  
    private static final String USERNAME = "username";
    private static final String SECRET = "secret";
    private static final String ROLE = "role";
    private static final String NAME = "name";
  
    private String username = null;
    private String secret = null;
    private byte[] salt;
    private int role = 0;
    private String name = null;
    private int uuid = -1;
  
    private Map<String, Object> userdata = null;
  
    public UserData(Map<String, Object> data) {
        userdata = data;
        System.out.println("userdata");
        
        
    }
  
    public void createUser() throws Exception {
        if(userdata != null) {
            username = (String) userdata.get(UserData.USERNAME);
            System.out.println(username);
            secret = (String) userdata.get(UserData.SECRET);
            System.out.println(secret);
			name = (String) userdata.get(UserData.NAME);
			System.out.println(name);

            String roleAsString = (String) userdata.get(UserData.ROLE);
            try {
                role = Integer.parseInt(roleAsString);
                            System.out.println(role);

            } catch (NumberFormatException e) {
                getLogger().throwing(getClass().getName(), "createUser()", e);
                throw new Exception(
                        "User role is expected to be an Integer. Got: "+roleAsString);
            }
  
            salt = SecurityUtil.generateSalt();
            try {
                secret = SecurityUtil.generatePassword(secret, salt);
            } catch (UnsupportedEncodingException e) {
                getLogger().throwing(getClass().getName(), "createUser()", e);
                throw new Exception("Error while encrypting the secret.");
            } catch (NoSuchAlgorithmException e) {
                getLogger().throwing(getClass().getName(), "createUser()", e);
                throw new Exception("Error while encrypting the secret.");
            }
        }
        else
            throw new NullPointerException("No User details specified");
    }
  
    public Map<String, Integer> getResponseData() {
        Map<String, Integer> responseData = new HashMap<String, Integer>();
        responseData.put("uuid", getUuid());
        return responseData;
    }
  
    public String getUsername() {
        return username;
    }
  
    public String getSecret() {
        return secret;
    }
  
    public byte[] getSalt() {
        return salt;
    }
  
    public int getRole() {
        return role;
    }
  
    public String getName() {
        return name;
    }
  
    public Map<String, Object> getUserdata() {
        return userdata;
    }
  
    public int getUuid() {
        return uuid;
    }
  
    /**
     * @param uuid the uuid to set
     */
    public void setUuid(int uuid) {
        this.uuid = uuid;
    }
}
